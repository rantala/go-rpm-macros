# Copyright (c) 2015-2018 Jan Chaloupka <jchaloup@redhat.com>,
#                         Nicolas Mailhot <nim@fedoraproject.org>
# This file is distributed under the terms of GNU GPL license version 3, or
# any later version.
#
# This file contains macros needed at %build %install and %check
# stage by Golang packages.
# The macros necessary at %setup and srpm stage are in the sister file
# macros.go-srpm

# Default filtering policy
# Complete or replace the following variables in your spec file if this policy
# does not apply to your project
#
# Specific example matching rule.
# The average Go project example code is incomplete and obsolete. It will
# fail to compile as-is, or even panic. It will poison the dependency
# generator with bogus or legacy import path requirements. Even when it it
# clean and up to date, it will require many third party components not needed
# in production. Therefore:
# – never install Go project example code in %{gopath}. Publish is as %doc.
# — ask politely projects that publish example code in some other directory
#   than _examples to rename it.
# – never rely on third party examples being available or working in another
#   project. This is *not* production code. Ask upstreams politely to remove
#   tests or code that import other project examples.
%goignoreflags_examples -r '.*example.*'

# Default flags to apply in all stages
%godefaultflags %{goignoreflags_examples}

# Default flags to apply in Go install (%goinstall)
%goinstallflags %{godefaultflags}

# Default flags to apply in Go checks (%gochecks)
%gocheckflags   %{godefaultflags}

# Default flags to apply in Go autoprovides
%goprovflags    %{godefaultflags}

# Default flags to apply in Go autorequires
%goreqflags     %{godefaultflags}

# The default filelist name generated by %goinstall
%gofilelist devel.file-list

# Sets environment variables suitable for a Go source archive. Optional arguments:
# -z <number>         read the zth block of definitions, for example
#                     %{goipath<number>}, %{commit<number>}…
#                     derived from the import path value if not specified
# -i <go import path> use the specified import path value instead of the one
#                     found in %{goipath<number>}
# -v                  be verbose
# -V <version>        Should only be specified when creating subpackages with
#                     distinct versions
#                     default: %{version}.%{release}
# -T <tag>            default: %{tag<number>}
# -C <commit>         default: %{commit<number>}
# -B <branch>         default: %{branch<number>}
%goenv(z:i:vV:T:C:B:) %{lua:
local    gorpm = require "rpmmacros.gorpm"
local   suffix =  rpm.expand("%{?-z*}")
local  goipath =  rpm.expand("%{?-i*}")
local  verbose = (rpm.expand("%{-v}") ~= "")
local    margs = { version = "V", tag = "T", commit = "C", branch = "B", }
local  mvalues = {}
for m,_ in pairs(margs) do
  local v =  rpm.expand("%{?-" ..  margs[m] .. "*}")
  if (v ~= "") then mvalues[m] = v end
end
gorpm.goenv(suffix, goipath, verbose, mvalues)
}

# Create default Go directories. Arguments:
# -z <number>         read the zth block of definitions, for example
#                     %{goipath<number>}, %{commit<number>}…
#                     derived from the import path value if not specified
# -i <go import path> use the specified import path value instead of the one
#                     found in %{goipath<number>}
#                     can not be repeated
# -b <builddir>       use <builddir>  as build directory
#                     binaries will be produced in <builddir>/bin
#                     expanded Go sources will be symlinked in <builddir>/src
# -s <sourcedir>      symlink expanded Go sources from <sourcedir>
#                     default: %{_builddir}/%{?extractdir<number>}
# -k                  keep the vendor directory, do not delete it
# -v                  be verbose
%gomkdir(z:i:b:s:kv) %{expand:
%goenv %{?-z} %{?-i} %{?-v}
%define mybuilddir  %{?-b*}%{!-b:%{gobuilddir}}
%define mygoipath   %{?-i*}%{!-i:%{currentgoipath}}
%define mysourcedir %{?-s*}%{!-s:%{currentgosourcedir}}
%{!?-k:rm -fr         "%{mysourcedir}/vendor"}
if [[ ! -e            "%{mybuilddir}/bin" ]] ; then
  install -m 0755 -vd "%{mybuilddir}/bin"
  export GOPATH="%{mybuilddir}:${GOPATH:+${GOPATH}:}%{?gopath}"
fi
if [[ ! -e                      "%{mybuilddir}/src/%{mygoipath}" ]] ; then
  install -m 0755 -vd "$(dirname %{mybuilddir}/src/%{mygoipath})"
  ln -fs "%{mysourcedir}"       "%{mybuilddir}/src/%{mygoipath}"
fi
cd                              "%{mybuilddir}/src/%{mygoipath}"
}

# Computes BuildRequires for a given import path. Optional argument:
# -i <go import path> use the specified import path value
%gobuildrequires(i:) %{expand: (
golist --imported --package-path %{?-i*}%{!-i:%{currentgoipath}} --skip-self
golist --imported --package-path %{?-i*}%{!-i:%{currentgoipath}} --skip-self --tests) | sort -u | xargs -I{} echo "golang({})"
}

# Perform usual Go source preparation steps. Optional arguments:
# -z <number>         read the zth block of definitions, for example
#                     %{goipath<number>}, %{commit<number>}…
#                     derived from the import path value if not specified
# -a                  process all sources in one go, instead of using separate
#                     -z calls
# -i <go import path> use the specified import path value instead of the one
#                     found in %{goipath<number>}
# -b <builddir>       use <builddir>  as build directory
#                     binaries will be produced in <builddir>/bin
#                     expanded Go sources will be symlinked in <builddir>/src
# -s <sourcedir>      symlink expanded Go sources from <sourcedir>
#                     default: %{_builddir}/%{?extractdir<number>}
# -k                  keep the vendor directory, do not delete it
# -e                  use extracted archives, do not perform %setup-like
#                     operations
# -r                  resolve BuildRequires, but do not install them
# -v                  be verbose
%goprep(z:ai:b:s:kerv) %{lua:
local      extract = (rpm.expand("%{-e}") == "")
local  installdeps = (rpm.expand("%{-r}") == "")
local   processall = (rpm.expand("%{-a}") ~= "") and (rpm.expand("%{-z}") == "")
local   setupflags =  rpm.expand("%{!-v:-q}")
local gomkdirflags =  rpm.expand("%{?-i} %{?-b} %{?-s} %{-k} %{-v}")
local    rpmmacros =  require "rpmmacros"
local buildrequires = {}
local function process(suffix)
  local zsuffix = ""
  if (suffix ~= "") and (suffix ~= nil) then
        zsuffix = "-z " .. suffix .. " "
  end
  if extract then
    print(rpm.expand("%setup " .. setupflags .. " %{?forgesetupargs" .. suffix .. "}\\n"))
  end
  print(  rpm.expand("%gomkdir " .. zsuffix .. gomkdirflags .. "\\n"))
  print('GOBUILDREQUIRES=$((sort -u |grep -v "^$" || :) <<< "$(' .. rpm.expand("%gobuildrequires") .. ')\\n${GOBUILDREQUIRES}")\\n')
end
-- Main loop
if processall then
  for _,s in pairs(rpmmacros.getsuffixes("goipath")) do
    process(s)
  end
else
   process(rpm.expand("%{?-z*}"))
end
if installdeps then
  print('[[ -n "${GOBUILDREQUIRES}" ]] && mock-install ${GOBUILDREQUIRES}\\n')
  print('unset GOBUILDREQUIRES\\n')
end
}

# Try to install Go package files in sensible locations, with strict directory
# ownership and lockfile creation as required by Go autodeps.
#
# Simple arguments, that can not be repeated:
# -z <number>         read the zth block of definitions, for example
#                     %{goipath<number>}, %{commit<number>}…
#                     derived from the import path value if not specified
# -a                  process all sources in one go, instead of using separate
#                     -z calls
# -i <go import path> use the specified import path value
#                     default: %{goipath<number>}
# -b <bindir>         read binaries already produced in <bindir>
#                     default: %{gobuilddir}/bin
# -s <sourcedir>      read expanded and prepared Go sources in <sourcedir>/src
#                     <sourcedir> should be populated in %prep
#                     default: %{gobuilddir}
# -o <filename>       output installed file list in <filename>
#                     default: %{gofilelist<number>}
# -O <directory>      output <filename> in <directory>
# -l <ldflags>        add those flags to LDFLAGS when building unit tests
# -v                  be verbose
#
# Inclusion arguments, that can be repeated:
# -e <extension>      include files with the provided extension
#
# Exclusion arguments, that can be repeated, relative to the go import path root:
# -d <directory>      exclude the files contained in <directory>
#                     not recursive (subdirectories are not excluded)
# -t <tree root>      exclude the files contained in <tree root>
#                     recursive (subdirectories are excluded)
# -r <regexp>         exclude files matching <regexp>,
#
# Optional versionning metadata, that can not be repeated:
# -V <version>        Should only be specified when creating subpackages with
#                     distinct versions
#                     default: %{version}.%{release}
# -T <tag>            default: %{tag<number>}
# -C <commit>         default: %{commit<number>}
# -B <branch>         default: %{branch<number>}
#
# When invoked several times with the same import path goinstall will append to
# the existing file list if versionning and exclusion arguments are identical to
# previous calls, and error out otherwise.
# When invoked several times with different file list names, it will attribute
# directories to the first file list that makes use of them.
%goinstall(z:ai:b:s:o:O:ve:d:t:rV:T:C:B:p:g:) %{lua:
local processall = (rpm.expand("%{-a}") ~= "") and (rpm.expand("%{-z}") == "")
local  rpmmacros = require "rpmmacros"
-- Main function
local function process(suffix)
  local zsuffix = ""
  if (suffix ~= "") and (suffix ~= nil) then
        zsuffix = "-z " .. suffix .. " "
  end
  print(rpm.expand('%goenv ' .. zsuffix .. '%{?-i} %{?-v} %{?-V} %{?-T} %{?-C} %{?-B}\\n'          ..
                   'go-rpm-integration install %{!-i:-i "%{currentgoipath}" }'                     ..
                                              '%{!-b:-b "%{gobuilddir}/bin" }'                     ..
                                              '%{!-s:-s "%{gobuilddir}" }'                         ..
                                              '%{!-o:-o "%{currentgofilelist}" }'                  ..
                                              '%{!-O:-O "%{goworkdir}" }'                          ..
                                              '%{!-V:-V "%{version}-%{release}" }'                 ..
                                              '%{!-T:%{?currenttag:    -T "%{?currenttag}" }}'     ..
                                              '%{!-C:%{?currentcommit: -C "%{?currentcommit}" }}'  ..
                                              '%{!-B:%{?currentbranch: -B "%{?currentbranch}" }}'  ..
                                              '%{!-p:-p "%{buildroot}" }'                          ..
                                              '%{!-g:-g "%{gopath}" }'                             ..
                                              '%{?goinstallflags} %{?**} \\n'))
end
-- Main loop
if processall then
  for _,s in pairs(rpmmacros.getsuffixes("goipath")) do
    process(s)
  end
else
  process(rpm.expand("%{-z*}"))
end
}

# Run go test %{gotestflags} on all subdirectories except for those filtered out
# THIS MACRO IS OPT-OUT.
#
# Simple arguments, that can not be repeated:
# -z <number>         read the zth block of definitions, for example
#                     %{goipath<number>}, %{commit<number>}…
#                     derived from the import path value if not specified
# -a                  process all sources in one go, instead of using separate
#                     -z calls
# -i <go import path> use the specified import path value
#                     default: %{goipath<number>}
# -b <bindir>         read binaries already produced in <bindir>
#                     default: %{gobuilddir}/bin
# -s <sourcedir>      read expanded and prepared Go sources in <sourcedir>/src
#                     <sourcedir> should be populated in %prep
#                     default: %{gobuilddir}
# -v                  be verbose
# Exclusion arguments, that can be repeated, relative to the go import path root:
# -d <directory>      exclude the files contained in <directory>
#                     not recursive (subdirectories are not excluded)
# -t <tree root>      exclude the files contained in <tree root>
#                     recursive (subdirectories are excluded)
# -r <regexp>         exclude files matching <regexp>,
%gocheck(z:ai:b:s:vd:t:rV:T:C:B:p:g:w) %{lua:
local processall = (rpm.expand("%{-a}") ~= "") and (rpm.expand("%{-z}") == "")
local  rpmmacros = require "rpmmacros"
-- Main function
local function process(suffix)
  local zsuffix = ""
  if (suffix ~= "") and (suffix ~= nil) then
        zsuffix = "-z " .. suffix .. " "
  end
  print(rpm.expand('%goenv ' .. zsuffix .. '%{?-i} %{?-v} %{?-V} %{?-T} %{?-C} %{?-B}\\n'        ..
                   '%{?currentgoldflags:LDFLAGS="${LDFLAGS}%{?currentgoldflags}" }'              ..
                   '%{?gotestflags:GO_TEST_FLAGS="%{gotestflags}" }'                             ..
                   '%{?gotestextldflags:GO_TEST_EXT_LD_FLAGS="%{gotestextldflags}" }'            ..
                   'go-rpm-integration check %{!-i:-i "%{currentgoipath}" }'                     ..
                                            '%{!-b:-b "%{gobuilddir}/bin" }'                     ..
                                            '%{!-s:-s "%{gobuilddir}" }'                         ..
                                            '%{!-V:-V "%{version}-%{release}" }'                 ..
                                            '%{!-T:%{?currenttag:    -T "%{?currenttag}" }}'     ..
                                            '%{!-C:%{?currentcommit: -C "%{?currentcommit}" }}'  ..
                                            '%{!-B:%{?currentbranch: -B "%{?currentbranch}" }}'  ..
                                            '%{!-p:-p "%{buildroot}" }'                          ..
                                            '%{!-g:-g "%{gopath}" }'                             ..
                                            '%{?gocheckflags} %{?**} \\n'))
end
-- Main loop
if processall then
  for _,s in pairs(rpmmacros.getsuffixes("goipath")) do
    process(s)
  end
else
  process(rpm.expand("%{-z*}"))
end
}

# Legacy compatibility macros. Do not use them. Should go away eventually
%gobuildroot %{expand:
%{warn:%%gobuildroot is obsolete, use %%goprep in %%prep instead!}
%goenv   -z 0
%gomkdir -k
ln -fs "%{gobuilddir}/bin" _bin
}

%gochecksflags   %{gocheckflags}

%gochecks(z:ai:b:s:vd:t:rV:T:C:B:p:g:w) %{expand:
%{warn:%%gochecks is obsolete, use %%gocheck in %%check instead!}
%gocheck %{?**}
}
