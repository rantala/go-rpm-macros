# Copyright (c) 2015-2018 Jakub Cajka <jcajka@redhat.com>,
#                         Jan Chaloupka <jchaloup@redhat.com>,
#                         Nicolas Mailhot <nim@fedoraproject.org>
# This file is distributed under the terms of GNU GPL license version 3, or
# any later version.

# This file contains macros for building projects in golang for packages
# with golang compiler or gcc-go compiler based on an architecture.
# Golang is primarly for primary architectures, gcc-go for secondary.
#
# This file provides only macros and must not use any other package except
# redhat-rpm-macros.

# Define arches for PA and SA
%golang_arches   %{ix86} x86_64 %{arm} aarch64 ppc64le s390x
%gccgo_arches    %{mips}
%go_arches       %{golang_arches} %{gccgo_arches}

# Where to set GOPATH for builds
%gopath          %{_datadir}/gocode

# Define go_compilers macro to signal go-compiler package is available
%go_compiler     1

# Sanitize a Go import path that can then serve as rpm package name
# Mandatory parameter: a Go import path
%gorpmname() %{lua:
local goname = rpm.expand("%1")
-- add a golang prefix and lowercase
goname       = string.lower("golang-" .. goname .. "/")
-- replace various separators rpm does not like with -
-- special-case x.y.z number-strings as that’s an exception in our naming
-- guidelines
goname       = string.gsub(goname, "^([^/]+)%.([^%./]+)/", "%1/")
goname       = string.gsub(goname, "(%d)%.(%d)",           "%1|%2")
goname       = string.gsub(goname, "[%._/%-]+",            "-")
-- Tokenize along - separators and remove duplicates to avoid
-- golang-foo-foo-bar-foo names
local result = ""
local tokens = {}
tokens["go"]     = true
tokens["git"]    = true
for token in string.gmatch(goname, "[^%-]+") do
   if not tokens[token] then
      result = result .. "-" .. token
      tokens[token] = true
   end
end
-- reassemble the string, restore x.y.z runs, convert the vx.y.z
-- Go convention to x.y.z as prefered in rpm naming
result = string.gsub(result, "^-", "")
result = string.gsub(result, "|", ".")
result = string.gsub(result, "%-v([%.%d])", "%1")
print(result)
}

# forgemeta macro is available in Rawhide only. Thus, it can't be used to generate
# source URL for other Fedora distribution. Until the macro is available there,
# the source URL needs to be crafted manually
%gocraftmeta(vi) %{expand:%{lua:
-- Be explicit about the spec variables we’re setting
local function explicitset(rpmvariable,value)
  rpm.define(rpmvariable .. " " .. value)
  if (rpm.expand("%{?-v}") ~= "") then
    rpm.expand("%{echo:Setting %%{" .. rpmvariable .. "} = " .. value .. "\\n}")
  end
end
-- Never ever stomp on a spec variable the packager already set
local function safeset(rpmvariable,value)
  if (rpm.expand("%{?" .. rpmvariable .. "}") == "") then
    explicitset(rpmvariable,value)
  end
end
function string.starts(String,Start)
   return string.sub(String,1,string.len(Start))==Start
end
-- All the Go packaging automation relies on gobaseipath being set
local gobaseipath = rpm.expand("%{?gobaseipath}")
if (gobaseipath == "") then
  rpm.expand("%{error:Please set the Go import path in the “gobaseipath” variable before calling “gometa”!}")
end
local commit = rpm.expand("%{?commit}")
if (commit == "") then
  rpm.expand("%{error:Please set the Go import path commit in the “commit” variable before calling “gometa”!}")
end
local provider_prefix = rpm.expand("%{?provider_prefix}")
if (provider_prefix == "") then
  rpm.expand("%{error:Please set the Go project provider prefix in the “provider_prefix” variable before calling “gometa”!}")
end
------------------------------------
-- Compute and set spec variables --
------------------------------------
safeset("gourl", "https://" .. gobaseipath)
safeset("goname", "%gorpmname %{gobaseipath}")
------------------------
-- gosource & gosetup --
------------------------
if string.starts(provider_prefix, "github.com") then
-- github.com/PROJECT/REPO
  index = 0
  for part in string.gmatch(provider_prefix, "[^/]+") do
    if index == 2 then
      safeset("gosource", "https://%{provider_prefix}/archive/%{commit}/" .. part .. "-" .. rpm.expand("%{shortcommit}") .. ".tar.gz")
      safeset("gosetup", "%setup -q -n " .. part .. "-%{commit}")
    end
    index = index + 1
  end
  safeset("shortcommit", rpm.expand("%(c=%{commit}; echo ${c:0:7})"))
elseif string.starts(provider_prefix, "bitbucket.org") then
  index = 0
  project = ""
  for part in string.gmatch(provider_prefix, "[^/]+") do
    if index == 1 then
      project = part
    elseif index == 2 then
      safeset("gosource", "https://%{provider_prefix}/get/" .. rpm.expand("%{shortcommit}") .. ".tar.gz")
      safeset("gosetup", "%setup -q -n " .. project .. "-" .. part .. "-" .. rpm.expand("%{shortcommit}"))
    end
    index = index + 1
  end
  safeset("shortcommit", rpm.expand("%(c=%{commit}; echo ${c:0:12})"))
end
-- Final spec variable summary if the macro was called with -i
if (rpm.expand("%{?-i}") ~= "") then
  rpm.expand("%{echo:Go-specific packaging variables\\n}")
  rpm.expand("%{echo:  gobaseipath:     %{?gobaseipath}\\n}")
  rpm.expand("%{echo:  goname:          %{?goname}\\n}")
  rpm.expand("%{echo:  gourl:           %{?gourl}\\n}")
  rpm.expand("%{echo:  gosource:        %{?gosource}\\n}")
  rpm.expand("%{echo:  gosetup:         %{?gosetup}\\n}")
  rpm.expand("%{echo:  shortcommit:     %{?shortcommit}\\n}")
end
}
# e.g. el6 has ppc64 arch without gcc-go, so EA tag is required
ExclusiveArch:  %{go_arches}
# If go_compiler is not set to 1, there is no virtual provide. Use golang instead.
BuildRequires:  %{?go_compiler:compiler(go-compiler)}%{!?go_compiler:golang}
}

